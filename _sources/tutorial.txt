
*********
Tutorials
*********

This tutorial is written base on OpenSuse OS.

Bower
##############

Package manager for control front-end packages

1. Install npm:

2. Install node js (do not forget about version of OpenSUSE.)


.. code-block:: bash
   :linenos:

   $ sudo zypper ar http://download.opensuse.org/repositories/devel:/languages:/nodejs/openSUSE_13.1/ NodeJSBuildService 
   $ sudo zypper in nodejs nodejs-devel


3. Install bower

.. code-block:: bash
   :linenos:

   $ npm install -g bower


Installing library with bower
*****************************

1. Find library in terminal

.. code-block:: bash
   :linenos:

   $ bower search [<name>]

2.  open/create component.json file in main js folder 

.. code-block:: json
   :linenos:

   #Basic structure of component.json
   {
     "name": "Name of your project",
     "version": "Version of your project",
     "dependencies" : {
       "vendor_lib_name1" : version1,
       "vendor_lib_name2" : version2
     }
   }

   #Kitcube example for installation of jquery
   {
     "name": "Kitcube status",
     "version": "0.0.1",
     "dependencies" : {
       "jquery" : null //null to install latest version (1.9 to install 1.9 version),
       "vendor_lib_name" :
     }
   }


3. cd to folder where lies your component.json

.. code-block:: bash
   :linenos:

   $ bower install

4. That's all. 

Configuration of bower
**********************

1. CAUTION. WILL BE HARD TO MERGE. If you wanna to configure bower (Installation path etc, just create .bowerrc file in one folder with)

.. code-block:: bash
   :linenos:

   $ touch .bowerrc

2. Put configuration like:

.. code-block:: bash
   :linenos:

   {
      "directory" : "scripts/vendor"
   }

Installation of the new version
*******************************

1. Just do again bower install with null parameter in component.json

Removing of library
*******************

1. In terminal

.. code-block:: bash
   :linenos:

   $ bower uninstall <package-name>


Backbone-Require.js
###################

Why to use Reqjs
****************

* some sort of #include/import/require (if you like C, python style)

* ability to load nested dependencies (jquery ui won't work without jquery)

* ease of use for developer but then backed by an optimization tool that helps deployment

Backbone JS
***********

It's bad to have all logic in dom -> better to divide it into parts.

Installation
************

1. Search repo by using bower search

.. code-block:: bash
   :linenos:

   $ bower search require.js
   $ bower search backbone-amd

2. Put needed name into component.json, like:

.. code-block:: bash
   :linenos:

   requirejs: null,
   backbone-amd: null //do not forget about amd version. To support asynchronous downloading it should be with -amd

3. bower install

4. structure of js folders should be like:

/* File Structure

├── imgs

├── css

│   └── style.css

├── templates

│   ├── projects

│   │   ├── list.html

│   │   └── edit.html

│   └── users

│       ├── list.html

│       └── edit.html

├── js

├──── build //files for configuration of building js files

├─────── dist  //folder for all minified files. 1 main file is called main.js (contatins all info)

├─────tests //test files

├─────scripts

│	├─ vendor //Vendor libraries. Here we put installed libraries with bower

│       ├──  jquery

│       │     ├── jquery.min.js

│       ├──  backbone

│       │     ├── backbone.min.js

│       ├──  underscore

│       │     ├── underscore.min.js

│       ├── dev // for our created libs

│	│    myParser

│	│     ├── myparser.js

│	│    myLib

│       ├── models

│   	│   ├── users.js

│      	│   └── projects.js

│       ├── collections

│       │    ├── users.js

│       │    └── projects.js

│   	├── views

│      	│   ├── projects

│       │   │     ├── list.js

│       │   │     └── edit.js

│   	│   └── users
│       │  	  ├── list.js

│       │         └── edit.js

│       ├── router.js //Router file. Do url routing

│       ├── app.js //Create application object here

│       ├── main.js  // Bootstrap. Just template for creating modules

│       ├── order.js //Require.js plugin

│       └── text.js  //Require.js plugin

└── index.html


5. main.js should contatin information about paths and dependencies order, like:

.. code-block:: javascript
   :linenos:
	
   require.config({
      paths: {
         "jquery": "vendor/jquery/jquery.min", //DO NOT SPECIFY EXTENSION 
	 "jqueryui": "vendor/jquery-ui/ui/jquery-ui", //Don't forget to comment your parts
		                                      //MVC part
         "underscore": "vendor/underscore-amd/underscore",
         "backbone": "vendor/backbone-amd/backbone"
      },
      shim: { //json object to set dependency order
         backbone: {
	    deps: [
	      'underscore',
	      'jquery'
	    ],
            exports: 'Backbone'
	 },
	 jqueryui: { //if jqueryui dependent of jquery, download it firstly
	    deps: [
	       'jquery'
	    ]
	 }
      }

6. app.js just to initialize router and do $(document).ready stuff

.. code-block:: javascript
   :linenos:

   define([
      'jquery',
      'underscore',
      'backbone',
      router
   ], function($, _, Backbone, Router) {
      var initialize = function() {
         Router.initialize();
         $(document).ready(funnction($) {		
         };
      }
      return {
         initialize: initialize
      };
   });


7. put in your one-page site index.html your single script tag:

::
   <script data-main="/js/scripts/main.js" src={% static "/js/scripts/vendor/requirejs/require.js" %}></script>


Model
*****

Model - contains interactive data with logic:

1. Conversions of data

2. Validation of data

3. Get Set properties

Example

.. code-block:: javascript

   Person = Backbone.Model.extend({
      defaults: { //Default values
         name: 'Alex',
         age: -20,
         child: ''
      },
      initialize: function(){
         alert("You're newborn");
      }
   }); 
   var person = new Person({ name: "Nicholas", age: 67, child: 'Chuan'});
   var age = person.get("age"); // 67
   var name = person.get("name"); // "Nicholas"
   var child = person.get("child"); // 'Chuan'

View
****

View - contains logic to encapsulate DOM element functionality. You can think about this that it's a widget on the screen (like menuLeft or gridster). Can contain logic like:

1. rendering a dom element (using underscore library to compile template)

2. initialize dom events to interact with users

3. Bind to event of changing the model

Simple view:

.. code-block:: javascript
   :linenos:

   GridView = Backbone.View.extend({
       tagName : "div",
       className : "grid",
 
       render : function() {
          this.el.innerHTML = this.model.get('name');
 
          return this;
       }
       this.model.bind('change:name', this.render); 
   });


Router
******

Routing by using app url

.. code-block:: javascript
   :linenos:

   var MyRouter = Backbone.Router.extend({
      routes : {
         "say/:something" : "say"
      },
      say : function(something) {
         alert(something);
      }
   });

